📌 To-Do List for Extraction Implementation
1️⃣ Check If Raw Data Exists Before Extracting
✅ Prevent redundant extraction to save Firebase costs.

Modify handleExtractData to check if clientData.rawData exists.
If rawData exists, skip extraction and show a message.
Optionally, add a force extract button if manual re-extraction is needed.
2️⃣ Implement Step-by-Step Extraction Tracking
✅ Show progress in real-time with ✅ ⏳ ❌ indicators.

Create a useState variable extractionStatus to track progress.
Update this state as each step completes.
If any step fails, stop the process immediately.
3️⃣ Retry Only the Failed Step
✅ Allow users to resume extraction from the last failed step.

Identify the failed step inside extractionStatus.
Add a "Retry Extraction" button that only runs the failed step.
Ensure retry logic updates extractionStatus properly.
4️⃣ Display Extraction Steps in the UI
✅ Use Tailwind to make extraction steps look better.

List all steps in order (Extract raw data, Clean data, Extract dates, etc.).
Show ✅ for completed, ⏳ for in-progress, ❌ for failed steps.
Optionally, add a scrolling animation as steps progress.
5️⃣ Store Extraction Progress in Firestore (Optional)
✅ Keep track of progress even if the user refreshes the page.

Save extractionStatus in Firestore under the client’s document.
When loading the page, check Firestore for the last progress state.
This ensures the extraction doesn’t restart from scratch after a reload.
6️⃣ Ensure Extracted Data is Saved Properly
✅ Store extracted transactions in the correct format.

Verify that transactions are structured properly after extraction.
Ensure extracted data is linked correctly to the client’s Firestore entry.
Double-check that no duplicate data is saved.
7️⃣ UI Improvements for Better User Experience
✅ Enhance the interface with better layout and interaction.

Use Tailwind animations to make extraction progress more engaging.
Highlight the current step dynamically.
Ensure the extraction UI is responsive and works well on different screens.